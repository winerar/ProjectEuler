namespace ProjectEuler
{
    public class LargestProductInASeries : IProblem
    {
        public int Id => 8;

        public string Title => "Largest product in a series";

        public string Description => "The four adjacent digits in the 1000-digit number that have the greatest product are" +
            " 9 × 9 × 8 × 9 = 5832." +
            "\n\t73167176531330624919225119674426574742355349194934" +
            "\n\t96983520312774506326239578318016984801869478851843" +
            "\n\t85861560789112949495459501737958331952853208805511" +
            "\n\t12540698747158523863050715693290963295227443043557" +
            "\n\t66896648950445244523161731856403098711121722383113" +
            "\n\t62229893423380308135336276614282806444486645238749" +
            "\n\t30358907296290491560440772390713810515859307960866" +
            "\n\t70172427121883998797908792274921901699720888093776" +
            "\n\t65727333001053367881220235421809751254540594752243" +
            "\n\t52584907711670556013604839586446706324415722155397" +
            "\n\t53697817977846174064955149290862569321978468622482" +
            "\n\t83972241375657056057490261407972968652414535100474" +
            "\n\t82166370484403199890008895243450658541227588666881" +
            "\n\t16427171479924442928230863465674813919123162824586" +
            "\n\t17866458359124566529476545682848912883142607690042" +
            "\n\t24219022671055626321111109370544217506941658960408" +
            "\n\t07198403850962455444362981230987879927244284909188" +
            "\n\t84580156166097919133875499200524063689912560717606" +
            "\n\t05886116467109405077541002256983155200055935729725" +
            "\n\t71636269561882670428252483600823257530420752963450" +
            "\n" +
            "Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. " +
            "What is the value of this product?";

        public string Solution => $"the greatest product equals {FindProduct()}";

        private long FindProduct()
        {
            long largestProduct = 0;

            const int adjacentCount = 13;

            for (int i = 0; i + adjacentCount <= number.Length; i++)
            {
                long product = 1;
                for (int j = 0; j < adjacentCount; j++)
                {
                    product *= number[i + j] - '0';
                }
                largestProduct = Math.Max(largestProduct, product);
            }

            return largestProduct;
        }

        private static readonly string number = "73167176531330624919225119674426574742355349194934969835203127745063" +
            "26239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305" +
            "07156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276" +
            "61428280644448664523874930358907296290491560440772390713810515859307960866701724271218839987979087922749" +
            "21901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670" +
            "63244157221553975369781797784617406495514929086256932197846862248283972241375657056057490261407972968652" +
            "41453510047482166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231" +
            "62824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896" +
            "04080719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606" +
            "0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    }
}
